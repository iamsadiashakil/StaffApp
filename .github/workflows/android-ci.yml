name: Android CI/CD with Version Management

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17 for the Android build
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      # Step 3: Set up Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # Step 4: Install Android SDK components
      - name: Install SDK components
        run: |
          yes | sdkmanager "platforms;android-35"
          yes | sdkmanager "build-tools;35.0.0"
          yes | sdkmanager "cmdline-tools;latest"

      # Step 5: Make Gradle Wrapper executable
      - name: Make Gradle Wrapper executable
        run: chmod +x ./gradlew

      # Step 6: Build the debug APK
      - name: Build debug APK
        run: ./gradlew assembleDebug

      # Step 7: Run unit tests
      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest

      # Step 8: Upload the APK artifact for debugging purposes
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk

  version-update:
    needs: build
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Increment versionCode and versionName in build.gradle
      - name: Increment versionCode and versionName
        run: |
          VERSION_CODE=$(grep versionCode app/build.gradle | awk '{print $2}')
          VERSION_NAME=$(grep versionName app/build.gradle | awk -F '"' '{print $2}')
          NEW_VERSION_CODE=$((VERSION_CODE + 1))
          NEW_VERSION_NAME="${VERSION_NAME%.*}.$((VERSION_CODE + 1))"
          sed -i "s/versionCode $VERSION_CODE/versionCode $NEW_VERSION_CODE/" app/build.gradle
          sed -i "s/versionName \"$VERSION_NAME\"/versionName \"$NEW_VERSION_NAME\"/" app/build.gradle
        shell: bash

      # Step 3: Commit and push the version update directly to master
      - name: Commit and Push Version Update
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add app/build.gradle
          git commit -m "CI: Bump version to $NEW_VERSION_NAME ($NEW_VERSION_CODE)" || echo "No changes to commit"
          git push origin master --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: [ build, version-update ]
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Download APK artifact
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug

      # Step 3: Install Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      # Step 4: Deploy the debug APK to Firebase App Distribution
      - name: Deploy to Firebase App Distribution
        run: |
          echo "Release notes for version $NEW_VERSION_NAME ($NEW_VERSION_CODE)" > RELEASE_NOTES.txt
          firebase appdistribution:distribute app/build/outputs/apk/debug/app-debug.apk \
            --app ${{ secrets.FIREBASE_APP_ID }} \
            --release-notes-file RELEASE_NOTES.txt \
            --groups "vexa.testers.com"
        shell: bash
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_AUTH_TOKEN }}