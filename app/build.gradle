plugins {
    alias(libs.plugins.android.application)
    id 'jacoco' // Apply the JaCoCo plugin
}

android {
    namespace 'com.myhealthteam.staffapp'
    compileSdk 35

    defaultConfig {
        applicationId "com.myhealthteam.staffapp"
        minSdk 24
        targetSdk 35
        versionCode 4
        versionName "1.4"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    buildFeatures {
        compose true
    }
}

dependencies {
    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.androidx.core
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
    implementation libs.androidx.coordinatorlayout
    implementation libs.mpandroidchart
    testImplementation libs.junit
    testImplementation libs.mockito.core
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
}

// Configure JaCoCo
jacoco {
    toolVersion = "0.8.10" // Use the latest JaCoCo version
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest' // Ensure tests run before generating the report

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    // Correct handling of source and class directories for Android
    def javaClasses = fileTree(
            dir: "$buildDir/intermediates/javac/debug/classes", // Path to compiled Java classes
            excludes: ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*']
    )

    sourceDirectories.setFrom(files(android.sourceSets.main.java.srcDirs))
    classDirectories.setFrom(javaClasses)
    executionData.setFrom(fileTree(dir: "$buildDir", includes: ["jacoco/testDebugUnitTest.exec"]))

    // Only include valid files
    doFirst {
        classDirectories.setFrom(classDirectories.files.filter { file ->
            file.exists()
        })
    }
}